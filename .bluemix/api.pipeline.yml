---
stages:
- name: BUILD US-South
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  properties:
  - name: OPENWHISK_API_ENDPOINT
    value: ${OPENWHISK_API_ENDPOINT_US}
    type: text
  - name: BXLOGIN_API_ENDPOINT
    value: ${BXLOGIN_API_ENDPOINT_US}
    type: text
  - name: APIC_URL
    value: ${APIC_URL_US}
    type: text
  - name: APIC_USER
    value: ${APIC_USER}
    type: text
  - name: APIC_PASS
    value: ${APIC_PASS}
    type: secure
  - name: ORG
    value: ${ORG}
    type: text
  - name: SPACE
    value: ${SPACE}
    type: text
  - name: DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: AUTH_FQDN
    value: ${AUTH_FQDN_US}
    type: text
  - name: ZUUL_FQDN
    value: ${ZUUL_FQDN_US}
    type: text
  - name: JWT_SHARED_SECRET
    value: ${JWT_SHARED_SECRET}
    type: text
  jobs:
  - name: Publish APIs to US-South
    type: builder
    artifact_dir: ''
    build_type: npm
    script: |-
        #!/bin/bash
        # The default Node.js version is 0.10.40
        # To use Node.js 0.12.7, uncomment the following line:
        export PATH=/opt/IBM/node-v0.12/bin:$PATH
        # To use Node.js 4.2.2, uncomment the following line:
        #export PATH=/opt/IBM/node-v4.2/bin:$PATH
        #npm install
        echo $PWD
        ls -al .
        # apic api url
        APIC_API_URL=api.${APIC_URL}

        # install yaml
        if [ ! -f ./yaml ]; then
          wget https://github.com/mikefarah/yaml/releases/download/1.5/yaml_linux_amd64 -O yaml
          chmod +x yaml
        fi

        # install jq
        if [ ! -f ./jq ]; then
          wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
          mv jq-linux64 jq
          chmod u+x jq
        fi

        # set orgs
        CHARLST="[@|.|-|_]"
        ORGS=$(echo $ORG|sed "s/$CHARLST//g")-$SPACE
        ORGS=$(echo $ORGS|tr '[:upper:]' '[:lower:]')

        # Configure APIC cli
        echo -e "Start installing apiconnect cli"
        npm install -g apiconnect
        echo -e "completed installing apic cli"
        echo "yes" | apic
        echo "no" | apic

        echo -e "Login and config set catalog.."
        apic login -u $APIC_USER -p $APIC_PASS -s ${APIC_URL}
        apic config:set catalog=apic-catalog://${APIC_URL}/orgs/${ORGS}/catalogs/bluecompute

        # publish oauthProvider
        echo -e "publish oauthProvider.."
        pushd oauthProvider
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.identity-extraction.custom-form.url "https://${AUTH_FQDN}/login.html"
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.identity-extraction.redirect-url "https://${AUTH_FQDN}/authenticate"
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.authentication.x-ibm-authentication-url.url "https://${AUTH_FQDN}/authenticate"
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.authorization.custom-form.url "https://${AUTH_FQDN}/grant.html"
        cat oauth-provider.yaml
        apic publish oauth-provider-product.yaml
        popd

        # publish socialreview
        echo -e "publish socialreview.."
        pushd socialreview
        # payload for openwhisk api
        echo -e "\nprepare payload to request openwhisk cli authkey..."
        payload=$(curl -XPOST -H "Accept: application/json" -H "Authorization: Basic Y2Y6" -H "Content-Type: application/x-www-form-urlencoded" -d "response_type=token&grant_type=password&username=${APIC_USER}&password=${APIC_PASS}" "https://${BXLOGIN_API_ENDPOINT}/UAALoginServerWAR/oauth/token" | ../jq -c '{"accessToken": .access_token, "refreshToken": .refresh_token}')

        # get openwhisk authkey
        echo -e "\nrequest openwhisk cli authkey..."
        namespace="${ORG}_${SPACE}"
        auth_key=$(curl -XPOST -H "Accept: application/json" -H "Content-Type: application/json" -d "${payload}" "https://${OPENWHISK_API_ENDPOINT}/bluemix/v1/authenticate" | ../jq --arg namespace "${namespace}" '.namespaces[] | select(.name == $namespace) | [.uuid,":",.key] | add' | sed -e 's/"//g')
        echo -e "\nwsk-authkey= $auth_key"

        # setup openwhisk cli
        echo -e "\ndownload and configure openwhisk cli..."
        curl https://${OPENWHISK_API_ENDPOINT}/cli/go/download/linux/amd64/wsk -o wsk
        chmod u+x wsk
        ./wsk property set --apihost ${OPENWHISK_API_ENDPOINT} --auth $auth_key
        ./wsk property unset --namespace
        ./wsk property get
        ./wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
        [ $? -eq 0 ] && echo "OpenWhisk CLI is successfully configured." || { echo "Failed to setup OpenWhisk CLI. Exit with error."; exit 1; }

        TARGET_HOST=$(./wsk api-experimental list|grep -v 'Verb\|APIs'|head -1|awk '{print $NF}'|cut -f1-3 -d'/')

        ../yaml w --inplace socialreview.yaml securityDefinitions.apic-oauth-provider.authorizationUrl "https://${APIC_API_URL}/${ORGS}/bluecompute/oauth20/authorize"
        ../yaml w --inplace socialreview.yaml x-ibm-configuration.properties.TARGET_HOST.value ${TARGET_HOST}
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        socialreview.yaml
        cat socialreview.yaml
        apic publish socialreview-product.yaml
        popd

        # publish customer
        echo -e "update customer.."
        pushd store-api
        ../yaml w --inplace customer.yaml securityDefinitions.apic-oauth-provider.authorizationUrl "https://${APIC_API_URL}/${ORGS}/bluecompute/oauth20/authorize"
        ../yaml w --inplace customer.yaml x-ibm-configuration.properties.TARGET_HOST.value "https://${ZUUL_FQDN}"
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        customer.yaml
        cat customer.yaml

        # publish orders
        echo -e "update orders.."
        ../yaml w --inplace order.yaml securityDefinitions.apic-oauth-provider.authorizationUrl "https://${APIC_API_URL}/${ORGS}/bluecompute/oauth20/authorize"
        ../yaml w --inplace order.yaml x-ibm-configuration.properties.TARGET_HOST.value "https://${ZUUL_FQDN}"
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        order.yaml
        cat order.yaml

        # publish catalog
        echo -e "update catalog.."
        ../yaml w --inplace catalog.yaml x-ibm-configuration.properties.TARGET_HOST.value "https://${ZUUL_FQDN}"
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        catalog.yaml
        cat catalog.yaml

        # publish product
        echo -e "publish store-api.."
        apic publish store-api-product.yaml

        popd


- name: BUILD London
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  properties:
  - name: OPENWHISK_API_ENDPOINT
    value: ${OPENWHISK_API_ENDPOINT_EU}
    type: text
  - name: BXLOGIN_API_ENDPOINT
    value: ${BXLOGIN_API_ENDPOINT_EU}
    type: text
  - name: APIC_URL
    value: ${APIC_URL_EU}
    type: text
  - name: APIC_USER
    value: ${APIC_USER}
    type: text
  - name: APIC_PASS
    value: ${APIC_PASS}
    type: secure
  - name: ORG
    value: ${ORG}
    type: text
  - name: SPACE
    value: ${SPACE}
    type: text
  - name: DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: AUTH_FQDN
    value: ${AUTH_FQDN_EU}
    type: text
  - name: ZUUL_FQDN
    value: ${ZUUL_FQDN_EU}
    type: text
  - name: JWT_SHARED_SECRET
    value: ${JWT_SHARED_SECRET}
    type: text
  jobs:
  - name: Publish APIs to London
    type: builder
    artifact_dir: ''
    build_type: npm
    script: |-
        #!/bin/bash
        # The default Node.js version is 0.10.40
        # To use Node.js 0.12.7, uncomment the following line:
        export PATH=/opt/IBM/node-v0.12/bin:$PATH
        # To use Node.js 4.2.2, uncomment the following line:
        #export PATH=/opt/IBM/node-v4.2/bin:$PATH
        #npm install
        echo $PWD
        ls -al .
        # apic api url
        APIC_API_URL=api.${APIC_URL}

        # install yaml
        if [ ! -f ./yaml ]; then
          wget https://github.com/mikefarah/yaml/releases/download/1.5/yaml_linux_amd64 -O yaml
          chmod +x yaml
        fi

        # install jq
        if [ ! -f ./jq ]; then
          wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
          mv jq-linux64 jq
          chmod u+x jq
        fi

        # set orgs
        CHARLST="[@|.|-|_]"
        ORGS=$(echo $ORG|sed "s/$CHARLST//g")-$SPACE
        ORGS=$(echo $ORGS|tr '[:upper:]' '[:lower:]')

        # Configure APIC cli
        echo -e "Start installing apiconnect cli"
        npm install -g apiconnect
        echo -e "completed installing apic cli"
        echo "yes" | apic
        echo "no" | apic

        echo -e "Login and config set catalog.."
        apic login -u $APIC_USER -p $APIC_PASS -s ${APIC_URL}
        apic config:set catalog=apic-catalog://${APIC_URL}/orgs/${ORGS}/catalogs/bluecompute

        # publish oauthProvider
        echo -e "publish oauthProvider.."
        pushd oauthProvider
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.identity-extraction.custom-form.url "https://${AUTH_FQDN}/login.html"
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.identity-extraction.redirect-url "https://${AUTH_FQDN}/authenticate"
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.authentication.x-ibm-authentication-url.url "https://${AUTH_FQDN}/authenticate"
        ../yaml w --inplace oauth-provider.yaml x-ibm-configuration.oauth2.authorization.custom-form.url "https://${AUTH_FQDN}/grant.html"
        cat oauth-provider.yaml
        apic publish oauth-provider-product.yaml
        popd

        # publish socialreview
        echo -e "publish socialreview.."
        pushd socialreview
        # payload for openwhisk api
        echo -e "\nprepare payload to request openwhisk cli authkey..."
        payload=$(curl -XPOST -H "Accept: application/json" -H "Authorization: Basic Y2Y6" -H "Content-Type: application/x-www-form-urlencoded" -d "response_type=token&grant_type=password&username=${APIC_USER}&password=${APIC_PASS}" "https://${BXLOGIN_API_ENDPOINT}/UAALoginServerWAR/oauth/token" | ../jq -c '{"accessToken": .access_token, "refreshToken": .refresh_token}')

        # get openwhisk authkey
        echo -e "\nrequest openwhisk cli authkey..."
        namespace="${ORG}_${SPACE}"
        auth_key=$(curl -XPOST -H "Accept: application/json" -H "Content-Type: application/json" -d "${payload}" "https://${OPENWHISK_API_ENDPOINT}/bluemix/v1/authenticate" | ../jq --arg namespace "${namespace}" '.namespaces[] | select(.name == $namespace) | [.uuid,":",.key] | add' | sed -e 's/"//g')
        echo -e "\nwsk-authkey= $auth_key"

        # setup openwhisk cli
        echo -e "\ndownload and configure openwhisk cli..."
        curl https://${OPENWHISK_API_ENDPOINT}/cli/go/download/linux/amd64/wsk -o wsk
        chmod u+x wsk
        ./wsk property set --apihost ${OPENWHISK_API_ENDPOINT} --auth $auth_key
        ./wsk property unset --namespace
        ./wsk property get
        ./wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
        [ $? -eq 0 ] && echo "OpenWhisk CLI is successfully configured." || { echo "Failed to setup OpenWhisk CLI. Exit with error."; exit 1; }

        TARGET_HOST=$(./wsk api-experimental list|grep -v 'Verb\|APIs'|head -1|awk '{print $NF}'|cut -f1-3 -d'/')

        ../yaml w --inplace socialreview.yaml securityDefinitions.apic-oauth-provider.authorizationUrl "https://${APIC_API_URL}/${ORGS}/bluecompute/oauth20/authorize"
        ../yaml w --inplace socialreview.yaml x-ibm-configuration.properties.TARGET_HOST.value ${TARGET_HOST}
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        socialreview.yaml
        cat socialreview.yaml
        apic publish socialreview-product.yaml
        popd

        # publish customer
        echo -e "update customer.."
        pushd store-api
        ../yaml w --inplace customer.yaml securityDefinitions.apic-oauth-provider.authorizationUrl "https://${APIC_API_URL}/${ORGS}/bluecompute/oauth20/authorize"
        ../yaml w --inplace customer.yaml x-ibm-configuration.properties.TARGET_HOST.value "https://${ZUUL_FQDN}"
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        customer.yaml
        cat customer.yaml

        # publish orders
        echo -e "update orders.."
        ../yaml w --inplace order.yaml securityDefinitions.apic-oauth-provider.authorizationUrl "https://${APIC_API_URL}/${ORGS}/bluecompute/oauth20/authorize"
        ../yaml w --inplace order.yaml x-ibm-configuration.properties.TARGET_HOST.value "https://${ZUUL_FQDN}"
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        order.yaml
        cat order.yaml

        # publish catalog
        echo -e "update catalog.."
        ../yaml w --inplace catalog.yaml x-ibm-configuration.properties.TARGET_HOST.value "https://${ZUUL_FQDN}"
        sed -i \
        -e 's/\(\\ \\"k\\"\: \\"\)\(.*\)\(\\"\\\)/\1JSONWEBTOKENSHAREDSECRET\3/' \
        -e "s/JSONWEBTOKENSHAREDSECRET/$JWT_SHARED_SECRET/" \
        catalog.yaml
        cat catalog.yaml

        # publish product
        echo -e "publish store-api.."
        apic publish store-api-product.yaml

        popd
