---
stages:
- name: BUILD US-South
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Register Zuul Container Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME_US}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash

        log_and_echo "Run gradle build..."
        export JAVA_HOME=~/java8
        export PATH=$JAVA_HOME/bin:$PATH
        /bin/bash build-microservice.sh -d
        ls -al docker
        cp -R docker/* .
        ls -al $PWD
        echo "Gradle build complete."

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"

        # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
        #####################
        # Run unit tests    #
        #####################
        log_and_echo "$LABEL" "No unit tests cases have been checked in"

        ######################################
        # Build Container via Dockerfile     #
        ######################################
        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
        )
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi

            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        ######################################################################################
        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        ######################################################################################
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
- name: DEPLOY US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Register Zuul Container Image
  properties:
  - name: REGION
    value: ${REGION_US}
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME_US}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: AUTO_RECOVERY
    value: 'true'
    type: text
  - name: MEMORY
    value: '256'
    type: text
  - name: CONTAINER_SIZE
    value: '256'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '3'
    type: text
  - name: DESIRED_INSTANCES
    value: '2'
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL_US}
    type: text
  - name: JWT_SHARED_SECRET
    value: ${JWT_SHARED_SECRET}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  triggers:
  - type: stage
  jobs:
  - name: Deploy Zuul Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    OPTIONAL_ARGS: -m ${MEMORY} -e eureka.instance.nonSecurePort=80 -e eureka.instance.preferIpAddress=true
    CONTAINER_NAME: ${ROUTE_HOSTNAME}
    DEPLOY_TYPE: red_black
    COMMAND: |-
        #!/bin/sh

        set -e
        echo "Removing ${ROUTE_HOSTNAME}_$BUILD_NUMBER, if exists"
        $IC_COMMAND group rm ${ROUTE_HOSTNAME}_$BUILD_NUMBER >/dev/null
        set +e
        # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
        echo -e "${label_color}Starting deployment script${no_color}"


        # To view/fork this script goto: https://github.com/Osthanes/deployscripts
        # git_retry will retry git calls to prevent pipeline failure on temporary github problems
        # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
        git_retry clone https://github.com/ssibm/deployscripts.git deployscripts



        # Deploy Container Group:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
        #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

        #                                    Default is false.
        #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                                            large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
        #                                    Default is 1
        # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
        ROUTE_FQDN="$ROUTE_HOSTNAME.$ROUTE_DOMAIN"
        OPTIONAL_ARGS="$OPTIONAL_ARGS -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} -e security.sharedSecret=${JWT_SHARED_SECRET} -e eureka.client.serviceUrl.defaultZone=$EUREKA_REGISTRY_URL -e eureka.instance.hostname= -e hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000 -e ribbon.ConnectTimeout=10000 -e ribbon.ReadTimeout=30000"
        log_and_echo "Optional Args: $OPTIONAL_ARGS"
        /bin/bash deployscripts/deploygroup.sh

        RESULT=$?

        # source the deploy property file
        if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
          source "$DEPLOY_PROPERTY_FILE"
        fi

        #########################
        # Environment DETAILS   #
        #########################
        # The environment has been setup.
        # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        if [ $RESULT -ne 0 ]; then
            echo -e "${red}Executed failed or had warnings ${no_color}"
            ${EXT_DIR}/print_help.sh
            exit $RESULT
        fi
        echo -e "${green}Execution complete${no_label}"

        # add to CMDB
        echo -e "Sending request to CMDB API to adding container group ${CONTAINER_NAME}..."
        curl "http://cmdbdevops.mybluemix.net/add?appname=${CONTAINER_NAME}&apptype=container&regionname=${REGION}&envname=${CF_SPACE}"

- name: BUILD London
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Register Zuul Container Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME_EU}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash

        log_and_echo "Run gradle build..."
        export JAVA_HOME=~/java8
        export PATH=$JAVA_HOME/bin:$PATH
        /bin/bash build-microservice.sh -d
        ls -al docker
        cp -R docker/* .
        ls -al $PWD
        echo "Gradle build complete."

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"

        # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
        #####################
        # Run unit tests    #
        #####################
        log_and_echo "$LABEL" "No unit tests cases have been checked in"

        ######################################
        # Build Container via Dockerfile     #
        ######################################
        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
        )
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
            log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
            ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
            # build image
            BUILD_COMMAND=""
            if [ "${USE_CACHED_LAYERS}" == "true" ]; then
                BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            else
                BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
                ice_retry ${BUILD_COMMAND}
                RESULT=$?
            fi

            if [ $RESULT -ne 0 ]; then
                log_and_echo "$ERROR" "Error building image"
                ice_retry info
                ice_retry images
                ${EXT_DIR}/print_help.sh
                ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
                exit 1
            else
                log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
                ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
            fi
        else
            log_and_echo "$ERROR" "Dockerfile not found in project"
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
            exit 1
        fi

        ######################################################################################
        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        ######################################################################################
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
- name: DEPLOY London
  inputs:
  - type: job
    stage: BUILD London
    job: Register Zuul Container Image
  properties:
  - name: REGION
    value: ${REGION_EU}
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME_EU}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: AUTO_RECOVERY
    value: 'true'
    type: text
  - name: MEMORY
    value: '256'
    type: text
  - name: CONTAINER_SIZE
    value: '256'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '3'
    type: text
  - name: DESIRED_INSTANCES
    value: '2'
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL_EU}
    type: text
  - name: JWT_SHARED_SECRET
    value: ${JWT_SHARED_SECRET}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  triggers:
  - type: stage
  jobs:
  - name: Deploy Zuul Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    OPTIONAL_ARGS: -m 128 -e eureka.instance.nonSecurePort=80 -e eureka.instance.preferIpAddress=true
    CONTAINER_NAME: ${ROUTE_HOSTNAME}
    DEPLOY_TYPE: red_black
    COMMAND: |-
        #!/bin/sh

        set -e
        echo "Removing ${ROUTE_HOSTNAME}_$BUILD_NUMBER, if exists"
        $IC_COMMAND group rm ${ROUTE_HOSTNAME}_$BUILD_NUMBER >/dev/null
        set +e
        # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
        echo -e "${label_color}Starting deployment script${no_color}"


        # To view/fork this script goto: https://github.com/Osthanes/deployscripts
        # git_retry will retry git calls to prevent pipeline failure on temporary github problems
        # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
        git_retry clone https://github.com/ssibm/deployscripts.git deployscripts



        # Deploy Container Group:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
        #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

        #                                    Default is false.
        #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                                            large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
        #                                    Default is 1
        # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
        ROUTE_FQDN="$ROUTE_HOSTNAME.$ROUTE_DOMAIN"
        OPTIONAL_ARGS="$OPTIONAL_ARGS -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} -e security.sharedSecret=${JWT_SHARED_SECRET} -e eureka.client.serviceUrl.defaultZone=$EUREKA_REGISTRY_URL -e eureka.instance.hostname= -e hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000 -e ribbon.ConnectTimeout=10000 -e ribbon.ReadTimeout=30000"
        log_and_echo "Optional Args: $OPTIONAL_ARGS"
        /bin/bash deployscripts/deploygroup.sh

        RESULT=$?

        # source the deploy property file
        if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
          source "$DEPLOY_PROPERTY_FILE"
        fi

        #########################
        # Environment DETAILS   #
        #########################
        # The environment has been setup.
        # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        if [ $RESULT -ne 0 ]; then
            echo -e "${red}Executed failed or had warnings ${no_color}"
            ${EXT_DIR}/print_help.sh
            exit $RESULT
        fi
        echo -e "${green}Execution complete${no_label}"

        # add to CMDB
        echo -e "Sending request to CMDB API to adding container group ${CONTAINER_NAME}..."
        curl "http://cmdbdevops.mybluemix.net/add?appname=${CONTAINER_NAME}&apptype=container&regionname=${REGION}&envname=${CF_SPACE}"
