---
stages:
- name: BUILD US-South
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Build and Register Inventory Microservice Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME_US}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash
        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"
        export JAVA_HOME=~/java8

        cd inventory
        ./gradlew build docker
        cd ..
        cp -r inventory/docker/* .

        # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
        #####################
        # Run unit tests    #
        #####################
        log_and_echo "$LABEL" "No unit tests cases have been checked in"

        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/")
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}

        ######################################
        # Build Container via Dockerfile     #
        ######################################

        # REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        # FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
          log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
          ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
          # build image
          BUILD_COMMAND=""
          if [ "${USE_CACHED_LAYERS}" == "true" ]; then
              BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          else
              BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          fi

          if [ $RESULT -ne 0 ]; then
              log_and_echo "$ERROR" "Error building image"
              ice_retry info
              ice_retry images
              ${EXT_DIR}/print_help.sh
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
              exit 1
          else
              log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
              ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
          fi
        else
          log_and_echo "$ERROR" "Dockerfile not found in project"
          ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
          exit 1
        fi
        ######################################################################################
        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        ######################################################################################
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties

- name: DEPLOY Inventory Microservice US-South
  inputs:
  - type: job
    stage: BUILD US-South
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: APP_NAME
    value: 'inventory-microservice'
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME_US}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_US}
    type: text
  - name: IGNORE_MAPPING_ROUTE
    value: 'true'
    type: text
  - name: AUTO_RECOVERY
    value: 'true'
    type: text
  - name: MEMORY
    value: '256'
    type: text
  - name: CONTAINER_SIZE
    value: '256'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '3'
    type: text
  - name: DESIRED_INSTANCES
    value: '2'
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL_US}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  - name: JDBC_URL
    value: ${MYSQL_JDBC_URL_US}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    type: secure
    value: ${MYSQL_PASSWORD}
  jobs:
  - name: Deploy Inventory Microservice Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
    PORT: '8080'
    OPTIONAL_ARGS: -m ${MEMORY}
    CONTAINER_NAME: ${ROUTE_HOSTNAME}
    DEPLOY_TYPE: red_black
    COMMAND: |-
        #!/bin/bash
        # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
        echo -e "${label_color}Starting deployment script${no_color}"
        set +e
        # download jq
        JQ_BIN=`which jq`
        if [ -z "${JQ_BIN}" ]; then
        if [ ! -f "./jq" ]; then
            wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
            mv jq-linux64 jq
            chmod u+x jq
            JQ_BIN="./jq"
        fi
        fi
        set -x

        # get elasticsearch creds
        set +e
        cf services | grep compose-for-elasticsearch
        [ $? -eq 1 ] && cf cs compose-for-elasticsearch Standard cloudnative-elasticsearch
        set -e
        es_svc=$(cf services | grep compose-for-elasticsearch | sed "s/\(.*\)\(compose-for-elasticsearch\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        set +e
        cf service-keys "${es_svc}" | grep "No service key for service instance"
        [ $? -eq 0 ] && cf csk "${es_svc}" "${es_svc}-cred1"
        set -e
        es_cred_name=$(cf service-keys "${es_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        es_creds=$(cf service-key "${es_svc}" "${es_cred_name}" | grep -v "Getting key ")
        es_url=$(echo "${es_creds}"|./jq '.uri'|sed 's/"//g;s/\(http.*\/\)\(.*\)\(\@\)\(.*\)/\1\4/')
        es_user=$(echo "${es_creds}"|./jq '.uri'|cut -f3 -d/|cut -f1 -d@|cut -f1 -d:)
        es_password=$(echo "${es_creds}"|./jq '.uri'|cut -f3 -d/|cut -f1 -d@|cut -f2 -d:)

        # get messagehub creds
        set +e
        cf services | grep messagehub
        [ $? -eq 1 ] && cf cs messagehub standard cloudnative-messagehub
        set -e
        messagehub_svc=$(cf services | grep messagehub | sed "s/\(.*\)\(messagehub\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        set +e
        cf service-keys "${messagehub_svc}" | grep "No service key for service instance"
        [ $? -eq 0 ] && cf csk "${messagehub_svc}" "${messagehub_svc}-cred1"
        set -e
        messagehub_cred_name=$(cf service-keys "${messagehub_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        messagehub_creds=$(cf service-key "${messagehub_svc}" "${messagehub_cred_name}" | grep -v "Getting key ")
        kafka_username=`echo "${messagehub_creds}" | ./jq '.user' | sed -e 's/"//g'`
        kafka_password=`echo "${messagehub_creds}" | ./jq '.password' | sed -e 's/"//g'`
        kafka_brokerlist=`echo "${messagehub_creds}" | ./jq '.kafka_brokers_sasl | join(" ")' | sed -e 's/"//g'`
        kafka_apikey=`echo "${messagehub_creds}" | ./jq '.api_key' | sed -e 's/"//g'`
        kafka_adminurl=`echo "${messagehub_creds}" | ./jq '.kafka_admin_url' | sed -e 's/"//g'`

        # get or create orders topic
        topicexists=`curl -I -H "X-Auth-Token: ${kafka_apikey}" ${kafka_adminurl}/topics/orders | grep HTTP | grep 404`
        if [ ! -z "${topicexists}" ]; then
            echo "creating \"orders\" topic on messagehub ..."
            curl -H "Content-Type: application/json" -X POST -d '{ "name": "orders", "configs": { "retentionMs": 86400000 } }' -H "X-Auth-Token: ${kafka_apikey}" ${kafka_adminurl}/admin/topics
        fi

        # To view/fork this script goto: https://github.com/Osthanes/deployscripts
        # git_retry will retry git calls to prevent pipeline failure on temporary github problems
        # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
        git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts
        # You can deploy your Image as either a single Container or as a Container
        # Group.  A Container Group deploys a number of containers to enhance
        # scalability or reliability.  By default we will deploy as a single
        # container.  To switch to a group deploy, comment out the line below
        # containing deploycontainer.sh and uncomment the line for deploygroup.sh
        # Deploy with containers:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============       =========     ==============
        #   BIND_TO             String        Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   CONTAINER_SIZE      String        Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                     large (4096), x-large (8192), 2x-large (16384).
        #                                     Default is micro (256).
        #   CONCURRENT_VERSIONS Number        Number of versions of this container to leave active.
        #                                     Default is 1
        #
        #/bin/bash deployscripts/deploycontainer.sh
        OPTIONAL_ARGS="${OPTIONAL_ARGS} \
            -e CG_NAME=${ROUTE_HOSTNAME} \
            -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} \
            -e eureka.client.fetchRegistry=false \
            -e eureka.client.registerWithEureka=false \
            -e "eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}" \
            -e "spring.datasource.url=${JDBC_URL}" \
            -e "spring.datasource.username=${MYSQL_USER}" \
            -e "spring.datasource.password=${MYSQL_PASSWORD}" \
            -e "elasticsearch.user=${es_user}" \
            -e "elasticsearch.password=${es_password}" \
            -e "elasticsearch.url=${es_url}" \
            -e "message_hub.topic=orders" \
            -e "message_hub.user=${kafka_username}" \
            -e "message_hub.password=${kafka_password}" \
            -e "message_hub.kafka_rest_url=${kafka_adminurl}" \
            -e "message_hub.api_key=${kafka_apikey}""
        # add the kafka broker list
        count=0
        for broker in ${kafka_brokerlist}; do
          OPTIONAL_ARGS="${OPTIONAL_ARGS} -e "message_hub.kafka_brokers_sasl[${count}]=${broker}""
          count=$((count+1))
        done
        # Deploy Container Group:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   ROUTE_HOSTNAME     String        Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   ROUTE_DOMAIN       String        Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   BIND_TO            String        Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   DESIRED_INSTANCES: Number        Specify the number of instances in the group.  Default value is 1.
        #   AUTO_RECOVERY:     Boolean       Set auto-recovery to true/false.  Default value is false.
        #                                    Default is false.
        #   CONTAINER_SIZE     String        Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                    large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
        #                                    Default is 1
        # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
        /bin/bash deployscripts/deploygroup.sh
        RESULT=$?
        # source the deploy property file
        if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
          source "$DEPLOY_PROPERTY_FILE"
        fi
        #########################
        # Environment DETAILS   #
        #########################
        # The environment has been setup.
        # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
            # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
        fi
        echo -e "${green}Execution complete${no_label}"

        # add to CMDB
        echo -e "Sending request to CMDB API to adding container group ${CONTAINER_NAME}..."
        curl "http://cmdbdevops.mybluemix.net/add?appname=${CONTAINER_NAME}&apptype=container&regionname=${REGION}&envname=${CF_SPACE}"


- name: BUILD London
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Build and Register Inventory Microservice Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME_EU}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
        #!/bin/bash
        # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        log_and_echo "$LABEL" "Starting build script"
        export JAVA_HOME=~/java8

        cd inventory
        ./gradlew build docker
        cd ..
        cp -r inventory/docker/* .

        # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
        #####################
        # Run unit tests    #
        #####################
        log_and_echo "$LABEL" "No unit tests cases have been checked in"

        SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/")
        IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
        REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}

        ######################################
        # Build Container via Dockerfile     #
        ######################################

        # REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
        # FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}
        # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

        if [ -f Dockerfile ]; then
          log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
          ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
          # build image
          BUILD_COMMAND=""
          if [ "${USE_CACHED_LAYERS}" == "true" ]; then
              BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          else
              BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          fi

          if [ $RESULT -ne 0 ]; then
              log_and_echo "$ERROR" "Error building image"
              ice_retry info
              ice_retry images
              ${EXT_DIR}/print_help.sh
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
              exit 1
          else
              log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
              ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
          fi
        else
          log_and_echo "$ERROR" "Dockerfile not found in project"
          ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
          exit 1
        fi
        ######################################################################################
        # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
        ######################################################################################
        echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties

- name: DEPLOY Inventory Microservice US-South
  inputs:
  - type: job
    stage: BUILD London
    job: Build and Register Inventory Microservice Image
  triggers:
  - type: stage
  properties:
  - name: APP_NAME
    value: 'inventory-microservice'
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME_EU}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN_EU}
    type: text
  - name: IGNORE_MAPPING_ROUTE
    value: 'true'
    type: text
  - name: AUTO_RECOVERY
    value: 'true'
    type: text
  - name: MEMORY
    value: '256'
    type: text
  - name: CONTAINER_SIZE
    value: '256'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '3'
    type: text
  - name: DESIRED_INSTANCES
    value: '2'
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL_EU}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  - name: JDBC_URL
    value: ${MYSQL_JDBC_URL_EU}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    type: secure
    value: ${MYSQL_PASSWORD}
  jobs:
  - name: Deploy Inventory Microservice Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
    PORT: '8080'
    OPTIONAL_ARGS: -m ${MEMORY}
    CONTAINER_NAME: ${ROUTE_HOSTNAME}
    DEPLOY_TYPE: red_black
    COMMAND: |-
        #!/bin/bash
        # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
        echo -e "${label_color}Starting deployment script${no_color}"
        set +e
        # download jq
        JQ_BIN=`which jq`
        if [ -z "${JQ_BIN}" ]; then
        if [ ! -f "./jq" ]; then
            wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
            mv jq-linux64 jq
            chmod u+x jq
            JQ_BIN="./jq"
        fi
        fi
        set -x

        # get elasticsearch creds
        cf services | grep compose-for-elasticsearch
        [ $? -eq 1 ] && cf cs compose-for-elasticsearch Standard cloudnative-elasticsearch
        es_svc=$(cf services | grep compose-for-elasticsearch | sed "s/\(.*\)\(compose-for-elasticsearch\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        cf service-keys "${es_svc}" | grep "No service key for service instance"
        [ $? -eq 0 ] && cf csk "${es_svc}" "${es_svc}-cred1"
        es_cred_name=$(cf service-keys "${es_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        es_creds=$(cf service-key "${es_svc}" "${es_cred_name}" | grep -v "Getting key ")
        es_url=$(echo "${es_creds}"|jq '.uri'|sed 's/"//g;s/\(http.*\/\)\(.*\)\(\@\)\(.*\)/\1\4/')
        es_user=$(echo "${es_creds}"|jq '.uri'|cut -f3 -d/|cut -f1 -d@|cut -f1 -d:)
        es_password=$(echo "${es_creds}"|jq '.uri'|cut -f3 -d/|cut -f1 -d@|cut -f2 -d:)

        # get messagehub creds
        cf services | grep messagehub
        [ $? -eq 1 ] && cf cs messagehub standard cloudnative-messagehub
        messagehub_svc=$(cf services | grep messagehub | sed "s/\(.*\)\(messagehub\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        cf service-keys "${messagehub_svc}" | grep "No service key for service instance"
        [ $? -eq 0 ] && cf csk "${messagehub_svc}" "${messagehub_svc}-cred1"
        messagehub_cred_name=$(cf service-keys "${messagehub_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        messagehub_creds=$(cf service-key "${messagehub_svc}" "${messagehub_cred_name}" | grep -v "Getting key ")
        kafka_username=`echo "${messagehub_creds}" | ./jq '.user' | sed -e 's/"//g'`
        kafka_password=`echo "${messagehub_creds}" | ./jq '.password' | sed -e 's/"//g'`
        kafka_brokerlist=`echo "${messagehub_creds}" | ./jq '.kafka_brokers_sasl | join(" ")' | sed -e 's/"//g'`
        kafka_apikey=`echo $"{messagehub_creds}" | ./jq '.api_key' | sed -e 's/"//g'`
        kafka_adminurl=`echo "${messagehub_creds}" | ./jq '.kafka_admin_url' | sed -e 's/"//g'`

        # get or create orders topic
        topicexists=`curl -I -H "X-Auth-Token: ${kafka_apikey}" ${kafka_adminurl}/topics/orders | grep HTTP | grep 404`
        if [ ! -z "${topicexists}" ]; then
            echo "creating \"orders\" topic on messagehub ..."
            curl -H "Content-Type: application/json" -X POST -d '{ "name": "orders", "configs": { "retentionMs": 86400000 } }' -H "X-Auth-Token: ${kafka_apikey}" ${kafka_adminurl}/admin/topics
        fi

        # To view/fork this script goto: https://github.com/Osthanes/deployscripts
        # git_retry will retry git calls to prevent pipeline failure on temporary github problems
        # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
        git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts
        # You can deploy your Image as either a single Container or as a Container
        # Group.  A Container Group deploys a number of containers to enhance
        # scalability or reliability.  By default we will deploy as a single
        # container.  To switch to a group deploy, comment out the line below
        # containing deploycontainer.sh and uncomment the line for deploygroup.sh
        # Deploy with containers:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============       =========     ==============
        #   BIND_TO             String        Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   CONTAINER_SIZE      String        Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                     large (4096), x-large (8192), 2x-large (16384).
        #                                     Default is micro (256).
        #   CONCURRENT_VERSIONS Number        Number of versions of this container to leave active.
        #                                     Default is 1
        #
        #/bin/bash deployscripts/deploycontainer.sh
        OPTIONAL_ARGS="${OPTIONAL_ARGS} \
            -e CG_NAME=${ROUTE_HOSTNAME} \
            -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} \
            -e eureka.client.fetchRegistry=false \
            -e eureka.client.registerWithEureka=false \
            -e "eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}" \
            -e "spring.datasource.url=jdbc:mysql://${JDBC_URL}" \
            -e "spring.datasource.username=${MYSQL_USER}" \
            -e "spring.datasource.password=${MYSQL_PASSWORD}" \
            -e "elasticsearch.user=${es_user}" \
            -e "elasticsearch.password=${es_password}" \
            -e "elasticsearch.url=${es_url}" \
            -e "message_hub.topic=orders" \
            -e "message_hub.user=${kafka_username}" \
            -e "message_hub.password=${kafka_password}" \
            -e "message_hub.kafka_rest_url=${kafka_adminurl}" \
            -e "message_hub.api_key=${kafka_apikey}""
        # add the kafka broker list
        count=0
        for broker in ${kafka_brokerlist}; do
          OPTIONAL_ARGS="${OPTIONAL_ARGS} -e "message_hub.kafka_brokers_sasl[${count}]=${broker}""
          count=$((count+1))
        done
        # Deploy Container Group:
        # Optional environment properties (can be set directly in this script, or defined as environment properties):
        #      NAME              Value         Description
        #   =============      =========     ==============
        #   ROUTE_HOSTNAME     String        Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   ROUTE_DOMAIN       String        Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
        #   BIND_TO            String        Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
        #   DESIRED_INSTANCES: Number        Specify the number of instances in the group.  Default value is 1.
        #   AUTO_RECOVERY:     Boolean       Set auto-recovery to true/false.  Default value is false.
        #                                    Default is false.
        #   CONTAINER_SIZE     String        Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
        #                                    large (4096), x-large (8192), 2x-large (16384).
        #                                    Default is micro (256).
        #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
        #                                    Default is 1
        # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
        /bin/bash deployscripts/deploygroup.sh
        RESULT=$?
        # source the deploy property file
        if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
          source "$DEPLOY_PROPERTY_FILE"
        fi
        #########################
        # Environment DETAILS   #
        #########################
        # The environment has been setup.
        # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
        # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
            # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
        if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
        fi
        echo -e "${green}Execution complete${no_label}"

        # add to CMDB
        echo -e "Sending request to CMDB API to adding container group ${CONTAINER_NAME}..."
        curl "http://cmdbdevops.mybluemix.net/add?appname=${CONTAINER_NAME}&apptype=container&regionname=${REGION}&envname=${CF_SPACE}"
