---
stages:
- name: DEPLOY US-South
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  properties:
  - name: OPENWHISK_API_ENDPOINT
    value: ${OPENWHISK_API_ENDPOINT_US}
    type: text
  - name: BXLOGIN_API_ENDPOINT
    value: ${BXLOGIN_API_ENDPOINT_US}
    type: text
  - name: BXUSER
    value: ${IBMID_USER}
    type: text
  - name: BXPASS
    value: ${IBMID_PASS}
    type: secure
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${REGION_US}
      organization: ${ORG}
      space: ${SPACE}
      application: ${NAME_US}
    script: |-
        #!/bin/bash

        set -x

        echo "Bluemix Login Target: https://$BXLOGIN_API_ENDPOINT"
        echo "OpenWhisk Target: https://$OPENWHISK_API_ENDPOINT"
        namespace=${CF_ORG}_${CF_SPACE}
        echo "namespace: $namespace"

        # download jq
        if [ ! -f ./jq ]; then
          wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
          mv jq-linux64 jq
          chmod u+x jq
        fi

        # payload for openwhisk api
        echo -e "\nprepare payload to request openwhisk cli authkey..."
        payload=$(curl -XPOST -H "Accept: application/json" -H "Authorization: Basic Y2Y6" -H "Content-Type: application/x-www-form-urlencoded" -d "response_type=token&grant_type=password&username=${BXUSER}&password=${BXPASS}" "https://${BXLOGIN_API_ENDPOINT}/UAALoginServerWAR/oauth/token" | ./jq '{"accessToken": .access_token, "refreshToken": .refresh_token}')

        # get openwhisk authkey
        echo -e "\nrequest openwhisk cli authkey..."
        auth_key=$(curl -XPOST -H "Accept: application/json" -H "Content-Type: application/json" -d "${payload}" "https://${OPENWHISK_API_ENDPOINT}/bluemix/v1/authenticate" | ./jq --arg namespace "${namespace}" '.namespaces[] | select(.name == $namespace) | [.uuid,":",.key] | add' | sed -e 's/"//g')
        echo -e "\nwsk-authkey= $auth_key"

        # setup openwhisk cli
        echo -e "\ndownload and configure openwhisk cli..."
        curl https://${OPENWHISK_API_ENDPOINT}/cli/go/download/linux/amd64/wsk -o wsk
        chmod u+x wsk
        ./wsk property set --apihost ${OPENWHISK_API_ENDPOINT} --auth $auth_key
        ./wsk property unset --namespace
        ./wsk property get
        ./wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
        [ $? -eq 0 ] && echo "OpenWhisk CLI is successfully configured." || { echo "Failed to setup OpenWhisk CLI. Exit with error."; exit 1; }

        # get cloudant credentials
        set +e
        cf services | grep cloudantNoSQLDB
        [ $? -eq 1 ] && cf cs cloudantNoSQLDB Lite cloudnative-cloudantDB
        set -e
        cloudant_svc=$(cf services | grep cloudantNoSQLDB | sed "s/\(.*\)\(cloudantNoSQLDB\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        set +e
        cf service-keys "${cloudant_svc}" | grep "No service key for service instance"
        set -e
        [ $? -eq 0 ] && cf csk "${cloudant_svc}" "${cloudant_svc}-cred1"
        cloudant_svc_key_name=$(cf service-keys "${cloudant_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        cloudant_svc_url=$(cf service-key "${cloudant_svc}" "${cloudant_svc_key_name}" | grep -v "Getting key " | ./jq '.url' | sed 's/\"//g')

        # get watson tone analyzer credentials
        set +e
        cf services | grep tone_analyzer
        [ $? -eq 1 ] && cf cs tone_analyzer standard cloudnative-toneanalyzer
        set -e
        watson_svc=$(cf services | grep tone_analyzer | sed "s/\(.*\)\(tone_analyzer\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        set +e
        cf service-keys "${watson_svc}" | grep "No service key for service instance"
        set -e
        [ $? -eq 0 ] && cf csk "${watson_svc}" "${watson_svc}-key1"
        watson_svc_key_name=$(cf service-keys "${watson_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        watson_svc_cred=$(cf service-key "${watson_svc}" "${watson_svc_key_name}" | grep -v "Getting key ")

        watson_url=`echo ${watson_svc_cred} | ./jq .url | sed 's/\"//g'`
        watson_username=`echo ${watson_svc_cred} | ./jq .username | sed 's/\"//g'`
        watson_password=`echo ${watson_svc_cred} | ./jq .password | sed 's/\"//g'`

        # create openwhisk package
        ./wsk package refresh

        set +e

        echo "Create package socialreview ..."
        ./wsk package get -s socialreview || \
            ./wsk package create socialreview --param cloudant_url ${cloudant_svc_url} --param watson_url ${watson_url} --param watson_password ${watson_password} --param watson_username ${watson_username} --param cloudant_reviews_db socialreviewdb


        echo "Creating socialreview/getReviews ..."
        ./wsk action get -s socialreview/getReviews && \
            ./wsk action update socialreview/getReviews openwhisk/actions/getReviews.js || \
            ./wsk action create socialreview/getReviews openwhisk/actions/getReviews.js

        echo "Creating socialreview/saveReview ..."
        ./wsk action get -s socialreview/saveReview && \
            ./wsk action update socialreview/saveReview openwhisk/actions/saveReview.js || \
            ./wsk action create socialreview/saveReview openwhisk/actions/saveReview.js

        echo "Creating socialreview/initCloudant ..."
        ./wsk action get -s socialreview/initCloudant && \
            ./wsk action update socialreview/initCloudant openwhisk/actions/initCloudant.js || \
            ./wsk action create socialreview/initCloudant openwhisk/actions/initCloudant.js

        echo "Creating socialreview/analyzeTone ..."
        ./wsk action get -s socialreview/analyzeTone && \
            ./wsk action update socialreview/analyzeTone openwhisk/actions/analyzeTone.js || \
            ./wsk action create socialreview/analyzeTone openwhisk/actions/analyzeTone.js

        echo "Creating REST API GET /api/reviews/list ..."
        ./wsk api-experimental list /api | grep /reviews/list | grep get || \
            ./wsk api-experimental create /api /reviews/list get socialreview/getReviews

        echo "Creating REST API POST /api/reviews/comment ..."
        ./wsk api-experimental list /api | grep /reviews/comment | grep post || \
            ./wsk api-experimental create /api /reviews/comment post socialreview/saveReview

        echo "Invoking socialreview/initCloudant ..."
        ./wsk action invoke socialreview/initCloudant --blocking

        # get the cloudant package
        cloudant_package=`./wsk package list | grep "${cloudant_svc_key_name}" | awk '{print $1;}'`
        echo "Creating trigger reviewTrigger for feed ${cloudant_package}/changes on db socialreviewdb ..."
        ./wsk trigger get -s reviewTrigger || \
            ./wsk trigger create reviewTrigger --feed ${cloudant_package}/changes --param dbname socialreviewdb-staging

        echo "Creating rule handleReviewPosted on reviewTrigger ..."
        ./wsk rule get -s handleReviewPosted || \
            ./wsk rule create handleReviewPosted reviewTrigger socialreview/analyzeTone


- name: DEPLOY London
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  properties:
  - name: OPENWHISK_API_ENDPOINT
    value: ${OPENWHISK_API_ENDPOINT_US}
    type: text
  - name: BXLOGIN_API_ENDPOINT
    value: ${BXLOGIN_API_ENDPOINT_US}
    type: text
  - name: BXUSER
    value: ${IBMID_USER}
    type: text
  - name: BXPASS
    value: ${IBMID_PASS}
    type: secure
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${REGION_EU}
      organization: ${ORG}
      space: ${SPACE}
      application: ${NAME_EU}
    script: |-
        #!/bin/bash

        set -x

        echo "Bluemix Login Target: https://$BXLOGIN_API_ENDPOINT"
        echo "OpenWhisk Target: https://$OPENWHISK_API_ENDPOINT"
        namespace=${CF_ORG}_${CF_SPACE}
        echo "namespace: $namespace"

        # download jq
        if [ ! -f ./jq ]; then
          wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
          mv jq-linux64 jq
          chmod u+x jq
        fi

        # payload for openwhisk api
        echo -e "\nprepare payload to request openwhisk cli authkey..."
        payload=$(curl -XPOST -H "Accept: application/json" -H "Authorization: Basic Y2Y6" -H "Content-Type: application/x-www-form-urlencoded" -d "response_type=token&grant_type=password&username=${BXUSER}&password=${BXPASS}" "https://${BXLOGIN_API_ENDPOINT}/UAALoginServerWAR/oauth/token" | ./jq '{"accessToken": .access_token, "refreshToken": .refresh_token}')

        # get openwhisk authkey
        echo -e "\nrequest openwhisk cli authkey..."
        auth_key=$(curl -XPOST -H "Accept: application/json" -H "Content-Type: application/json" -d "${payload}" "https://${OPENWHISK_API_ENDPOINT}/bluemix/v1/authenticate" | ./jq --arg namespace "${namespace}" '.namespaces[] | select(.name == $namespace) | [.uuid,":",.key] | add' | sed -e 's/"//g')
        echo -e "\nwsk-authkey= $auth_key"

        # setup openwhisk cli
        echo -e "\ndownload and configure openwhisk cli..."
        curl https://${OPENWHISK_API_ENDPOINT}/cli/go/download/linux/amd64/wsk -o wsk
        chmod u+x wsk
        ./wsk property set --apihost ${OPENWHISK_API_ENDPOINT} --auth $auth_key
        ./wsk property unset --namespace
        ./wsk property get
        ./wsk action invoke /whisk.system/utils/echo -p message hello --blocking --result
        [ $? -eq 0 ] && echo "OpenWhisk CLI is successfully configured." || { echo "Failed to setup OpenWhisk CLI. Exit with error."; exit 1; }

        # get cloudant credentials
        set +e
        cf services | grep cloudantNoSQLDB
        [ $? -eq 1 ] && cf cs cloudantNoSQLDB Lite cloudnative-cloudantDB
        set -e
        cloudant_svc=$(cf services | grep cloudantNoSQLDB | sed "s/\(.*\)\(cloudantNoSQLDB\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        set +e
        cf service-keys "${cloudant_svc}" | grep "No service key for service instance"
        set -e
        [ $? -eq 0 ] && cf csk "${cloudant_svc}" "${cloudant_svc}-cred1"
        cloudant_svc_key_name=$(cf service-keys "${cloudant_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        cloudant_svc_url=$(cf service-key "${cloudant_svc}" "${cloudant_svc_key_name}" | grep -v "Getting key " | ./jq '.url' | sed 's/\"//g')

        # get watson tone analyzer credentials
        set +e
        cf services | grep tone_analyzer
        [ $? -eq 1 ] && cf cs tone_analyzer standard cloudnative-toneanalyzer
        set -e
        watson_svc=$(cf services | grep tone_analyzer | sed "s/\(.*\)\(tone_analyzer\)\(.*\)/\1/" | sed 's/^[ \t]*//;s/[ \t]*$//')
        set +e
        cf service-keys "${watson_svc}" | grep "No service key for service instance"
        set -e
        [ $? -eq 0 ] && cf csk "${watson_svc}" "${watson_svc}-key1"
        watson_svc_key_name=$(cf service-keys "${watson_svc}" | tail -1 | sed 's/^[ \t]*//;s/[ \t]*$//')
        watson_svc_cred=$(cf service-key "${watson_svc}" "${watson_svc_key_name}" | grep -v "Getting key ")

        watson_url=`echo ${watson_svc_cred} | ./jq .url | sed 's/\"//g'`
        watson_username=`echo ${watson_svc_cred} | ./jq .username | sed 's/\"//g'`
        watson_password=`echo ${watson_svc_cred} | ./jq .password | sed 's/\"//g'`

        # create openwhisk package
        ./wsk package refresh

        set +e

        echo "Create package socialreview ..."
        ./wsk package get -s socialreview || \
            ./wsk package create socialreview --param cloudant_url ${cloudant_svc_url} --param watson_url ${watson_url} --param watson_password ${watson_password} --param watson_username ${watson_username} --param cloudant_reviews_db socialreviewdb


        echo "Creating socialreview/getReviews ..."
        ./wsk action get -s socialreview/getReviews && \
            ./wsk action update socialreview/getReviews openwhisk/actions/getReviews.js || \
            ./wsk action create socialreview/getReviews openwhisk/actions/getReviews.js

        echo "Creating socialreview/saveReview ..."
        ./wsk action get -s socialreview/saveReview && \
            ./wsk action update socialreview/saveReview openwhisk/actions/saveReview.js || \
            ./wsk action create socialreview/saveReview openwhisk/actions/saveReview.js

        echo "Creating socialreview/initCloudant ..."
        ./wsk action get -s socialreview/initCloudant && \
            ./wsk action update socialreview/initCloudant openwhisk/actions/initCloudant.js || \
            ./wsk action create socialreview/initCloudant openwhisk/actions/initCloudant.js

        echo "Creating socialreview/analyzeTone ..."
        ./wsk action get -s socialreview/analyzeTone && \
            ./wsk action update socialreview/analyzeTone openwhisk/actions/analyzeTone.js || \
            ./wsk action create socialreview/analyzeTone openwhisk/actions/analyzeTone.js

        echo "Creating REST API GET /api/reviews/list ..."
        ./wsk api-experimental list /api | grep /reviews/list | grep get || \
            ./wsk api-experimental create /api /reviews/list get socialreview/getReviews

        echo "Creating REST API POST /api/reviews/comment ..."
        ./wsk api-experimental list /api | grep /reviews/comment | grep post || \
            ./wsk api-experimental create /api /reviews/comment post socialreview/saveReview

        echo "Invoking socialreview/initCloudant ..."
        ./wsk action invoke socialreview/initCloudant --blocking

        # get the cloudant package
        cloudant_package=`./wsk package list | grep "${cloudant_svc_key_name}" | awk '{print $1;}'`
        echo "Creating trigger reviewTrigger for feed ${cloudant_package}/changes on db socialreviewdb ..."
        ./wsk trigger get -s reviewTrigger || \
            ./wsk trigger create reviewTrigger --feed ${cloudant_package}/changes --param dbname socialreviewdb-staging

        echo "Creating rule handleReviewPosted on reviewTrigger ..."
        ./wsk rule get -s handleReviewPosted || \
            ./wsk rule create handleReviewPosted reviewTrigger socialreview/analyzeTone
